Funcionalidades do GIT

Acesse o GitBash

1) git config --global user.name "nome do usuário"
	Configura o nome do usuário
2) git config --global user.email "e-mail padrão"
	Configura o e-mail padrão do usuário
	Obs.: 	*Para ter acesso direto mais rapido sempre para as tas que está estudando.
		*Mude diretamente no local, procure o GitBash, acesse as propriedades.
		*Modifique o acesso inicial para a pasta destino.
	Obs.: 	*Se não funcionar de primeira, na local destino tem um configuração a mais --cd-to-home.
		*Retire essa opção que GitBash irá abrir sempre na pasta destino selecionada.

3) git add -> 	Funcional com mais três funções.
	3.1) 	git add (nome do arquivo: Ex.: documento.txt)
		Ele adicionará somente o arquivo selecionado.
	3.2) 	git add (extensão do arquivo: Ex: .txt)
		Adiciona todos os arquivos desse tipo de extensão
	3.3)	git add .
		Ele adicionará todos os arquivos existente na página master

4) git status -> Mostrará o todos os arquivos que serão adicionados

5) git commit -> Adicionará todos os arquivos que estavam preparados na área intermediaria.
	Obs: 	*Quando for adicionar um git commit sempre colocar o comando -m ""
		*Esse comando você fornecerá a informação do que foi modificado nessa ultima alteração feita no sistema.

6) .gitignore -> Comando usar quando vc quer esconder determinada pasta do repositorio, ou determinado arquivo.
		*Abrir o bloco de notas, colocar para salvar como a extensão .gitignore, e a opção todos os arquivos
		*Tudo o que você colocar dentro do arquivo ou então selecionar determinados arquivos serão ignorados pelo o GIT

7) git diff -> Mostra o que está no seu direitorio de trabalhado e o que vai ser modificado

8) git log -> Mostra todas as alterações detalhadamente

9) git log -p -> Mostra todas as alterações mais detalhado ainda
		*git log -p -1 - Mostra de maneira detalhada a ultima alteração.
		Obs: Podendo mudar a variavel, exemplo - 2 ele mostra as duas ultimas alterações

10) gitk -> Mostra o painel grafico do gitbash, onde consegue observar varias alterações de maneira mais didatica

11) git log --pretty=oneline - Mostra os dados do último commit atualizado, sem mostrar hora, quem fez, local e todos os outros dados

12) git commit --amend -m ""
		Função para editar um commit quando esquecemos de algum arquivo
		12.1) 	Primeiro vc adiciona o arquivo ao espaço.
			git add .
		12.2) 	Posteriormente você dá o comando git commit --amend -m "" adicionando a alteração para o commit que esqueceu de algo

13) git reset HEAD (nome do arquivo) -> para retirar o arquivo que você não quer que seja adicionado no commit

14) git checkout -- (nome do arquivo) -> Quando vc volta as funções anteriores do arquivo
	git checkout (Escolher a tag versão) ->g

15) git tag -> 	Cria uma tag (tipos de versões)
		git tag -a (número da versão) -m "" -> Coloca no nome da versão e fornece todas as informações disponiveis
		git tag -a (número da versão) chave de acesso -m "" -> Você consegue pegar uma versão anterior e versionar ela, definir uma versão para ela
			*Fazengo da seguinte maneira
				15.1 Comando: git log --pretty-oneline: para ter acessos a todas as versões e a chave de acesso
				15.2 Comadno: git tag -a (número da versão da tag) (Chave de acesso do log) -m "" (para escrever a mensagem e definir o que fazer)

16) git remote add origin (local onde vai hospedar) -> Comando que você utiliza para determinar o link do github ou site onde irá hospedar

17) git push origin master -> É o comando que você utiliza para enviar os arquivos para o GitHub

18) git show (Versão que deseja) -> Para ver o conteúdo da versão desejada

19) git checkout master -> Para voltar ao normal do que estamos mechendo

20) git tag -d (versão da tag que vou deletar)

21) git branch (e determina o que irá fazer)
	Isso, quando você quer fazer uma atualização em determinado local, mas sem prejudicar todo o projeto.
	21.1) 	git checkout (nome do branch) Você irá direto utilizar o teste que iniciou
		*Para voltar a versão original sem as ultima alterações é só usar o comando git checkout master, que volta para a configuração normal
	21.2) SE ESTÁ VENDO ESSA IMAGEM É PORQUE O COMANDO BRANCH FUNCIONOU
22) git merge Para trazer as funções de teste que você fez no branch para o branch master

	*Obs: Você sempre tem que estar no local onde vc quer fazer as alterações, Ex.: /Documents/Cursos/git/local (master)